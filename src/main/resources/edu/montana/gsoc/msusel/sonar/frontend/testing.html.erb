<%
# The MIT License (MIT)
# 
# SparQLine Analytics Sonar Front End Plugin
# Copyright (c) 2015-2017 Isaac Griffith, SparQLine Analytics, LLC
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

acceptPass = widget_properties["acceptPassMetric"]
acceptFail = widget_properties["acceptFailMetric"]
acceptError = widget_properties["acceptErrorMetric"]

unitPass = widget_properties["unitPassMetric"]
unitFail = widget_properties["unitFailMetric"]
unitError = widget_properties["unitErrorMetric"]

integrationPass = widget_properties["integrationPassMetric"]
integrationFail = widget_properties["integrationFailMetric"]
integrationError = widget_properties["integrationErrorMetric"]

pennPass = widget_properties["pennPassMetric"]
pennFail = widget_properties["pennFailMetric"]
pennError = widget_properties["pennErrorMetric"]

uiPass = widget_properties["uiPassMetric"]
uiFail = widget_properties["uiFailMetric"]
uiError = widget_properties["uiErrorMetric"]
%>
<link rel="stylesheet" type="text/css" href="<%= url_for_static(:plugin => 'msuselfrontend', :path => 'quamoco.css') -%>" media="screen" />
        
<div id="quamoco-tests" class="quamoco-tests quamoco_tests_widget" style="height:100%; width:815px">
<!--[if lte IE 8 ]> <h3>Your browser is out of date and does not support this widget.</h3> <!--[endif]-->
<!--[if (gte IE 9)|!(IE)]><!-->
    
    <span style="display:inline;width:100%;">
        <div style="float:left;font-family:sans-serif;width:100%;">
            <h2 style="display: inline;" id='title-h2'>Testing</h2>
            <hr style="float:left;width:100%"/>
        </div> </span>
    <script src="<%= url_for_static(:plugin => 'msuselfrontend', :path => 'test.js') -%>"></script>
    <script src="<%= url_for_static(:plugin => 'msuselfrontend', :path => 'components.js') -%>"></script>
    <script src="<%= url_for_static(:plugin => 'msuselfrontend', :path => 'moment.min.js') -%>"></script>
<script>

// Setup the chart width and the data variable
var chartWidth = $('#quamoco-tests').parent().width();
var datas = [];

// Extract data using SonarQube webservice and then fill the datas variable
$(document).read(function() {
    var params = {
        format: "json",
        fromDateTime: moment().format("YYYY-MM-DDTHH:mm:ss.SSSZZ"),
        metrics: "<%= acceptPass %>,<%= acceptFail %>,<%= acceptError %>,<%= unitPass %>,<%= unitFail %>,<%= unitError %>,<%= integrationPass %>,<%= integrationFail %>,<%= integrationError %>,<%= pennPass %>,<%= pennFail %>,<%= pennError %>,<%= uiPass %>,<%= uiFail %>,<%= uiError %>",
        resource: window.navbarOptions.get('contextKey')
    };
    var tens = {};
        
    // get last n days of values
    $.getJSON('api/timemachine/index',params,function(d) {
        for each (var obj in d['cols']) {
            tens[obj['metric']] = [];
            names.push(obj['metric']);
        }
        
        // create trend array for each metric
        for each (var obj in d['cells']) {
            for (var i = 0; i < names.length; i++)
                tens[names[i]].push(obj['v'][i]);
        }
        
        // set the previous value
        for each (var obj in names) {
            prev[obj] = tens[obj][tens[obj].length - 1];
        }
    });
    
    params = {
        format: "json",
        resource: window.navbarOptions.get('contextKey'), // get the resource name from the page
        depth: 0,
        scope: "PRJ",
        languages: "java,cs",
        includetrends: "false",
        metrics: "<%= acceptPass %>,<%= acceptFail %>,<%= acceptError %>,<%= unitPass %>,<%= unitFail %>,<%= unitError %>,<%= integrationPass %>,<%= integrationFail %>,<%= integrationError %>,<%= pennPass %>,<%= pennFail %>,<%= pennError %>,<%= uiPass %>,<%= uiFail %>,<%= uiError %>"
    }
    
    // get current measures
    $.getJSON('api/resources', params, function(d) {
        for each (var obj in d["msr"]) {
            var key = obj["key"];
            var val = obj["val"];
            current[key] = val;
        }
    });
    
    // fill in the datas variable
    for each (var name in names) {
        var param = {
            key: name,
            format: "json"
        }
        
        $.getJSON('/api/metrics', param, function(d) {
            var obj = {
                "title": d[0]['name'],
                "subtitle": "",
                "last10": tens[name],
                "results": [current[name], previous[name]],
                "value": [current[name], previous[name] - current[name]]
            }
            datas.push(obj);
        });
    }
});

{"title":"Acceptance Tests",
 "subtitle":"percent",
 "last10":[45,35,10,90,85,17,35,75,80,65],
 "results":[60,95,100],
 "value":[60, -5],
 "threshold":[85]}

var data = [{"title":"Acceptance Tests","subtitle":"percent","last10":[45,35,10,90,85,17,35,75,80,65],"results":[60,95,100],"value":[60, -5],"threshold":[85]},
			{"title":"User Interface Tests","subtitle":"percent","last10":[45,35,10,90,85,17,35,75,80,65],"results":[60,95,100],"value":[60, -5],"threshold":[85]},
			{"title":"Integration Tests","subtitle":"percent","last10":[45,35,10,90,85,17,35,75,80,65],"results":[60,95,100],"value":[60,-5],"threshold":[85]},
			{"title":"Penetration Tests","subtitle":"percent","last10":[45,35,10,90,85,17,35,75,80,65],"results":[60,95,100],"value":[60,-5],"threshold":[85]},
			{"title":"Unit Tests","subtitle":"percent","last10":[45,35,10,90,85,17,35,75,80,65],"results":[60,95,100],"value":[60,-5],"threshold":[85]}];

var insets = {top: 5, bottom: 20, titleRight: 158, sparkLeft: 162, sparkRight: 224, testLeft: 226, testRight: 494, valueLeft: 525, valueRight: 558, gradeLeft: 560},
    width = 270,
    height = 45 - insets.top - insets.bottom;

var chart = d3.test()
    .width(width)
    .height(height);

var svg = d3.select("#quamoco-tests")
	.selectAll("svg")
	.data(data)
    .enter()
	.append("svg")
      .attr("class", "quamoco")
      .attr("width", chartWidth)
      .attr("height", 45)
      .append("g")
      .attr("transform", "translate(" + insets.testLeft + "," + insets.top + ")")
      .call(chart);

var title = svg.append("g")
    .style("text-anchor", "end")
    .attr("transform", "translate(-80," + height / 2 + ")");

labelBox(title);

var value = svg.append("g")
	.style("text_anchor", "start")
	.attr("transform", "translate(278," + height / 2 + ")");

valueWithChange(value, 60, height / 2, 60, false, "value", null, "%")
	
var spark = svg.append("g"),
	w = 65,
	h = height,
	barPadding = 2;
spark = spark.attr("transform", "translate(-70," + height / 2 + ")");
	
spark.selectAll("rect")
	.data(function(d) { return d.last10; })
	.enter()
	.append("rect")
	.attr({
		x: function(d, i) { return i * (w / 10);},
		y: function(d) {return (height / 2 - 20) + (20 - ((d / 100) * 20));}, //function(d) { var scale = d3.scale.linear().domain([0,1]).range([insets.bottom, insets.top]); return scale.linear(d)},
		width: function(d) { return w / 10 - barPadding; },
		height: function(d) { return (((d / 100) * 20)); },
		fill: "black"
	});

var svg2 = d3.select("#quamoco-tests")
	.insert("svg","svg")
		.attr("class", "quamoco")
		.attr("width", 800)
		.attr("height", 20)
		.append("g")
		.style("text-anchor", "start")
		.attr("transform", "translate(" + insets.testLeft + ", 0)");

svg2.append("text")
	.attr("class", "header")
	.attr("x", -77)
	.attr("y", 15)
	.text("Last 10 Builds");
	
svg2.append("text")
	.attr("class", "header")
	.attr("x", 100)
	.attr("y", 15)
	.text("Current Build");
	
svg2.append("text")
	.attr("class", "header")
	.attr("x", insets.valueLeft - insets.testLeft)
	.attr("y", 15)
	.text("Coverage");
	
var svg3 = d3.select("#quamoco-tests")
	.append("svg")
	.attr("class", "quamoco")
	.attr("width", 800)
	.attr("height", 25)
	.append("g")
	.attr("transform", "translate(" + (insets.testLeft - 90) + ", 20)");
	
var key1 = svg3.append("g")

key1.append("rect")
	.attr("width", 20)
	.attr("height", 20)
	.attr("x", 0)
	.attr("y", -15)
	.attr("class", "result s2");

key1.append("text")
	.attr("x", 25)
	.attr("class", "key")
	.text("Passing");
	
var key2 = svg3.append("g")
	.attr("transform", "translate(80, 0)");

key2.append("rect")
	.attr("width", 20)
	.attr("height", 20)
	.attr("x", 0)
	.attr("y", -15)
	.attr("class", "result s1");
	
key2.append("text")
	.attr("x", 25)
	.attr("class", "key")
	.text("Failing");
	
var key3 = svg3.append("g")
	.attr("transform", "translate(150, 0)");
	
key3.append("rect")
	.attr("width", 20)
	.attr("height", 20)
	.attr("x", 0)
	.attr("y", -15)
	.attr("class", "result s0");
	
key3.append("text")
	.attr("x", 25)
	.attr("class", "key")
	.text("Errors");
	
var key4 = svg3.append("g")
	.attr("transform", "translate(220, 0)");
	
key4.append("line")
	.attr("x1", 0)
	.attr("x2", 0)
	.attr("y1", -15)
	.attr("y2", 5)
	.style("stroke", "black")
	.style("stroke-width", 2)

key4.append("text")
	.attr("x", 7)
	.attr("class", "key")
	.text("Coverage Threshold");

var key5 = svg3.append("g")
	.attr("transform", "translate(360, 0)");
	
key5.append("circle")
	.attr("cx", 0)
	.attr("cy", -5)
	.attr("r", 5)
	
key5.append("text")
	.attr("x", 13)
	.attr("class", "key")
	.text("Current Coverage");
</script>
<!--<![endif]-->
<!--[if (gte IE 9)|!(IE)]><!-->
</div>