<%
 # The MIT License (MIT)
  #
  # SiliconCode Sonar Front End Plugin
  # Copyright (c) 2015 Isaac Griffith, SiliconCode, LLC
  #
  # Permission is hereby granted, free of charge, to any person obtaining a copy
  # of this software and associated documentation files (the "Software"), to deal
  # in the Software without restriction, including without limitation the rights
  # to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  # copies of the Software, and to permit persons to whom the Software is
  # furnished to do so, subject to the following conditions:
  #
  # The above copyright notice and this permission notice shall be included in all
  # copies or substantial portions of the Software.
  #
  # THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  # IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  # FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  # AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  # LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  # OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  # SOFTWARE.

  # Grading Scheme
  gradeAmin = widget_properties["gradeAmin"]
  gradeBmin = widget_properties["gradeBmin"]
  gradeCmin = widget_properties["gradeCmin"]
  gradeDmin = widget_properties["gradeDmin"]
  gradeEmin = widget_properties["gradeEmin"]

  # Metric names
  quality = widget_properties["qualityMetric"]
  func_suit = widget_properties["functionalSuitabilityMetric"]
  reliability = widget_properties["reliabilityMetric"]
  perf_eff = widget_properties["performanceEfficiencyMetric"]
  maintainability = widget_properties["maintainabilityMetric"]
  security = widget_properties["securityMetric"]
  portability = widget_properties["portabilityMetric"]
  usability = widget_properties["usabilityMetric"]
  compatibility = widget_properties["compatibilityMetric"]
%>

<link rel="stylesheet" type="text/css" href="<%= url_for_static(:plugin => 'MSUFrontEnd', :path => 'quamoco.css') -%>" media="screen" />

<div id="quamoco-bullets" class="quamoco-bullets quamoco_bullets_widget" style="height:100%;width:100%;">

	<!--[if lte IE 8 ]> <h3>Your browser is out of date and does not support this widget.</h3> <!--[endif]-->
	<!--[if (gte IE 9)|!(IE)]><!-->
	<span style="display:inline;width:100%;">
		<div style="float:left;font-family:sans-serif;width:100%;">
			<h2 style="display: inline;" id='title-h2'>Quamoco Product Quality</h2>&nbsp;&nbsp;&nbsp; <h3 style="display: inline;" id="compliance">(ISO/IEC 25010)</h3>
			<div style="display: inline;float:right;font-family:sans-serif;">
				<form>
					Model:&nbsp;&nbsp;
					<select class="td-method" id="td-method" onchange="updateEverything(this.options[this.selectedIndex].text)">
						<option value="quamoco">Quamoco</option>
						<!--<option value="qmood">QMOOD</option>
						<option value="sqale">SQALE</option>
						<option value="columbus">Columbus</option>-->
					</select>
				</form>
			</div>
			<hr style="float:left;width:100%"/>
		</div> </span>
	<script src="<%= url_for_static(:plugin => 'MSUFrontEnd', :path => 'bullets.js') -%>"></script>
	<script src="<%= url_for_static(:plugin => 'MSUFrontEnd', :path => 'CombinedChart.js') -%>"></script>
	<script src="<%= url_for_static(:plugin => 'MSUFrontEnd', :path => 'components.js') -%>"></script>
	<!--<script src="<%= url_for_static(:plugin => 'MSUFrontEnd', :path => 'moment.min.js') -%>"></script>-->

	<script>
				// Update the quality display
		function metrics(selected) {
			if (selected === "Quamoco")
			{
				return "sc_td_nugroho_principal,sc_td_nugroho_interest,sc_td_nugroho_ratio";
			}
			else if (selected === "QMOOD")
			{
				return "sc_td_cast_principal,sc_td_cast_principal";
			}
			else if (selected === "Columbus")
			{
				return "sc_td_chin_principal,sc_td_chin_interest,sc_td_chin_ratio";
			}
			else if (selected === "SQALE")
			{
				return "";
			}
		}

		function setTitle(selected) {
			if (selected === "Quamoco") {
				document.getElementById("title-h2").innerHTML = "Quamoco Quality Model";
				document.getElementById("compliance").innerHTML = "(ISO/IEC 25010)";
			} else if (selected === "QMOOD") {
				document.getElementById("title-h2").innerHTML = "QMOOD Quality Model";
				document.getElementById("compliance").innerHTML = "";
			} else if (selected === "Columbus") {
				document.getElementById("title-h2").innerHTML = "Columbus Quality Model";
				document.getElementById("compliance").innerHTML = "(ISO 9126)";
			} else if (selected === "SQALE") {
				document.getElementById("title-h2").innerHTML = "SQALE Quality Model";
				document.getElementById("compliance").innerHTML = "(ISO 9126)";
			}
		}

		// Determine the grade associated with the provided value
		function grade(value) {
			if (value >= <%= gradeAmin %>)
				return "A";
			else if (value >= <%= gradeBmin %>)
				return "B";
			else if (value >= <%= gradeCmin %>)
				return "C";
			else if (value >= <%= gradeDmin %>)
				return "D";
			else if (value >= <%= gradeEmin %>)
				return "E";
			else
				return "F";
		}
		
		function getContextID() {
			href = jQuery(_x('//ul[@class="nav-crumbs"]/li/a')).attr('href')
			id = href.split('&id=')[1]
			return jQuery.decodeURIComponent(id)
		}

		// Setup the chart width and the data variable
		var chartWidth = jQuery('#quamoco-bullets').parent().width();
		var datas = [];

		// Extract data using SonarQube webservice and then fill the datas variable
		jQuery(document).read(getData());

		function getData() {
			var params = {
				format: "json",
				fromDateTime: moment().format("YYYY-MM-DDTHH:mm:ss.SSSZZ"),
				metrics: "<%= quality %>,<%= func_suit %>,<%= reliability %>,<%= perf_eff %>,<%= maintainability %>,<%= security %>,<%= portability %>,<%= usability %>,<%= compatibility %>",
				resource: getContextID()
			};
			var tens = {};
			var tensMax = {};
			var previous = {};
			var current = {};
			var names = [];
	
			// get last n days of values
			jQuery.getJSON('api/timemachine/index',params,function(d) {
				for (let obj of d["cols"]) {
					tens[obj["metric"]] = [];
					names.push(obj["metric"]);
				}

				// create trend array for each metric
				for (let obj of d["cells"]) {
					for (var i = 0; i < names.length; i++)
						tens[names[i]].push(obj["v"][i]);
				}

				// find max of previous values
				for (let obj of names){
					tensMax[obj] = Math.max.apply(null, tens[obj]);
				}

				// set the previous value
				for (let obj of names) {
					prev[obj] = tens[obj][tens[obj].length - 1];
				}
			});
	
			params = {
			format: "json",
			resource: window.navbarOptions.get("contextKey"), // get the resource name from the page
			depth: 0,
			scope: "PRJ",
			languages: "java,cs",
			includetrends: "false",
			metrics: "<%= quality %>,<%= func_suit %>,<%= reliability %>,<%= perf_eff %>,<%= maintainability %>,<%= security %>,<%= portability %>,<%= usability %>,<%= compatibility %>",
			}
	
			// get current measures
			jQuery.getJSON('api/resources', params, function(d) {chartWidth
				for (let obj of d["msr"]) {
					var key = obj["key"];
					var val = obj["val"];
					current[key] = val;
				}
			});
	
			// fill in the datas variable
			for (let name of names) {
				var param = {
					key: name,
					format: "json"
				}
	
				jQuery.getJSON('/api/metrics', param, function(d) {
					var obj = {
						"title": d[0]['name'],
						"subtitle": "",
						"last10max": tensMax[name],
						"last10": tens[name],
						"ranges": [
							<%= gradeAmin %>,<%= gradeBmin %>,<%= gradeCmin %>,<%= gradeDmin %>,<%= gradeEmin %>
						],
						"measures": [current[name], previous[name]],
						"markers": [
							<%= gradeAmin %>
						],
						"value": [current[name], previous[name] - current[name]],
						"grade": grade(current[name])
					};
					datas.push(obj);
				});
			}
		}

		var chart = d3.CombinedChart().height(45 - 5 - 20).valueFixed(2).contWidth(chartWidth).data(datas).contID("#quamoco-bullets").cssclass("quamoco").grade(true);

		chart.createChart();
		
		function updateEverything(selected) {
			setTitle(selected);
	
			d3.select("#quamoco-bullets").selectAll("svg").remove();
			chart = d3.CombinedChart().height(45 - 5 - 20).valueFixed(2).contWidth(chartWidth).data(datas).contID("#quamoco-bullets").cssclass("quamoco").grade(true);
	
			chart.createChart();
		}
	</script>
	<!--<![endif]-->
	<!--[if (gte IE 9)|!(IE)]><!-->
</div>